{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { assert } from '@ember/debug';\n\nimport type Store from '@ember-data/store';\nimport { StableDocumentIdentifier } from '@ember-data/types/cache/identifier';\n\n/**\n * Simple utility function to assist in url building,\n * query params, and other common request operations.\n *\n * These primitives may be used directly or composed\n * by request builders to provide a consistent interface\n * for building requests.\n *\n * For instance:\n *\n * ```ts\n * import { buildBaseURL, buildQueryParams } from '@ember-data/request-utils';\n *\n * const baseURL = buildBaseURL({\n *   host: 'https://api.example.com',\n *   namespace: 'api/v1',\n *   resourcePath: 'emberDevelopers',\n *   op: 'query',\n *   identifier: { type: 'ember-developer' }\n * });\n * const url = `${baseURL}?${buildQueryParams({ name: 'Chris', include:['pets'] })}`;\n * // => 'https://api.example.com/api/v1/emberDevelopers?include=pets&name=Chris'\n * ```\n *\n * This is useful, but not as useful as the REST request builder for query which is sugar\n * over this (and more!):\n *\n * ```ts\n * import { query } from '@ember-data/rest/request';\n *\n * const options = query('ember-developer', { name: 'Chris', include:['pets'] });\n * // => { url: 'https://api.example.com/api/v1/emberDevelopers?include=pets&name=Chris' }\n * // Note: options will also include other request options like headers, method, etc.\n * ```\n *\n * @module @ember-data/request-utils\n * @main @ember-data/request-utils\n * @public\n */\n\n// prevents the final constructed object from needing to add\n// host and namespace which are provided by the final consuming\n// class to the prototype which can result in overwrite errors\n\ninterface BuildURLConfig {\n  host: string | null;\n  namespace: string | null;\n}\n\nlet CONFIG: BuildURLConfig = {\n  host: '',\n  namespace: '',\n};\n\n/**\n * Sets the global configuration for `buildBaseURL`\n * for host and namespace values for the application.\n *\n * These values may still be overridden by passing\n * them to buildBaseURL directly.\n *\n * This method may be called as many times as needed\n *\n * ```ts\n * type BuildURLConfig = {\n *   host: string;\n *   namespace: string'\n * }\n * ```\n *\n * @method setBuildURLConfig\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {BuildURLConfig} config\n * @returns void\n */\nexport function setBuildURLConfig(config: BuildURLConfig) {\n  CONFIG = config;\n}\n\nexport interface FindRecordUrlOptions {\n  op: 'findRecord';\n  identifier: { type: string; id: string };\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface QueryUrlOptions {\n  op: 'query';\n  identifier: { type: string };\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface FindManyUrlOptions {\n  op: 'findMany';\n  identifiers: { type: string; id: string }[];\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\nexport interface FindRelatedCollectionUrlOptions {\n  op: 'findRelatedCollection';\n  identifier: { type: string; id: string };\n  fieldPath: string;\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface FindRelatedResourceUrlOptions {\n  op: 'findRelatedRecord';\n  identifier: { type: string; id: string };\n  fieldPath: string;\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface CreateRecordUrlOptions {\n  op: 'createRecord';\n  identifier: { type: string };\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface UpdateRecordUrlOptions {\n  op: 'updateRecord';\n  identifier: { type: string; id: string };\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport interface DeleteRecordUrlOptions {\n  op: 'deleteRecord';\n  identifier: { type: string; id: string };\n  resourcePath?: string;\n  host?: string;\n  namespace?: string;\n}\n\nexport type UrlOptions =\n  | FindRecordUrlOptions\n  | QueryUrlOptions\n  | FindManyUrlOptions\n  | FindRelatedCollectionUrlOptions\n  | FindRelatedResourceUrlOptions\n  | CreateRecordUrlOptions\n  | UpdateRecordUrlOptions\n  | DeleteRecordUrlOptions;\n\nconst OPERATIONS_WITH_PRIMARY_RECORDS = new Set([\n  'findRecord',\n  'findRelatedRecord',\n  'findRelatedCollection',\n  'updateRecord',\n  'deleteRecord',\n]);\n\nfunction isOperationWithPrimaryRecord(\n  options: UrlOptions\n): options is\n  | FindRecordUrlOptions\n  | FindRelatedCollectionUrlOptions\n  | FindRelatedResourceUrlOptions\n  | UpdateRecordUrlOptions\n  | DeleteRecordUrlOptions {\n  return OPERATIONS_WITH_PRIMARY_RECORDS.has(options.op);\n}\n\nfunction resourcePathForType(options: UrlOptions): string {\n  return options.op === 'findMany' ? options.identifiers[0].type : options.identifier.type;\n}\n\n/**\n * Builds a URL for a request based on the provided options.\n * Does not include support for building query params (see `buildQueryParams`)\n * so that it may be composed cleanly with other query-params strategies.\n *\n * Usage:\n *\n * ```ts\n * import { buildBaseURL } from '@ember-data/request-utils';\n *\n * const url = buildBaseURL({\n *   host: 'https://api.example.com',\n *   namespace: 'api/v1',\n *   resourcePath: 'emberDevelopers',\n *   op: 'query',\n *   identifier: { type: 'ember-developer' }\n * });\n *\n * // => 'https://api.example.com/api/v1/emberDevelopers'\n * ```\n *\n * On the surface this may seem like a lot of work to do something simple, but\n * it is designed to be composable with other utilities and interfaces that the\n * average product engineer will never need to see or use.\n *\n * A few notes:\n *\n * - `resourcePath` is optional, but if it is not provided, `identifier.type` will be used.\n * - `host` and `namespace` are optional, but if they are not provided, the values globally\n *    configured via `setBuildURLConfig` will be used.\n * - `op` is required and must be one of the following:\n *   - 'findRecord' 'query' 'findMany' 'findRelatedCollection' 'findRelatedRecord'` 'createRecord' 'updateRecord' 'deleteRecord'\n * - Depending on the value of `op`, `identifier` or `identifiers` will be required.\n *\n * @method buildBaseURL\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param urlOptions\n * @returns string\n */\nexport function buildBaseURL(urlOptions: UrlOptions): string {\n  const options = Object.assign(\n    {\n      host: CONFIG.host,\n      namespace: CONFIG.namespace,\n    },\n    urlOptions\n  );\n  assert(\n    `buildBaseURL: You must pass \\`op\\` as part of options`,\n    typeof options.op === 'string' && options.op.length > 0\n  );\n  assert(\n    `buildBaseURL: You must pass \\`identifier\\` as part of options`,\n    options.op === 'findMany' || (options.identifier && typeof options.identifier === 'object')\n  );\n  assert(\n    `buildBaseURL: You must pass \\`identifiers\\` as part of options`,\n    options.op !== 'findMany' ||\n      (options.identifiers &&\n        Array.isArray(options.identifiers) &&\n        options.identifiers.length > 0 &&\n        options.identifiers.every((i) => i && typeof i === 'object'))\n  );\n  assert(\n    `buildBaseURL: You must pass valid \\`identifier\\` as part of options, expected 'id'`,\n    !isOperationWithPrimaryRecord(options) ||\n      (typeof options.identifier.id === 'string' && options.identifier.id.length > 0)\n  );\n  assert(\n    `buildBaseURL: You must pass \\`identifiers\\` as part of options`,\n    options.op !== 'findMany' || options.identifiers.every((i) => typeof i.id === 'string' && i.id.length > 0)\n  );\n  assert(\n    `buildBaseURL: You must pass valid \\`identifier\\` as part of options, expected 'type'`,\n    options.op === 'findMany' || (typeof options.identifier.type === 'string' && options.identifier.type.length > 0)\n  );\n  assert(\n    `buildBaseURL: You must pass valid \\`identifiers\\` as part of options, expected 'type'`,\n    options.op !== 'findMany' ||\n      (typeof options.identifiers[0].type === 'string' && options.identifiers[0].type.length > 0)\n  );\n\n  // prettier-ignore\n  const idPath: string =\n      isOperationWithPrimaryRecord(options) ? encodeURIComponent(options.identifier.id)\n      : '';\n  const resourcePath = options.resourcePath || resourcePathForType(options);\n  const { host, namespace } = options;\n  const fieldPath = 'fieldPath' in options ? options.fieldPath : '';\n\n  assert(\n    `buildBaseURL: You tried to build a ${String(\n      (options as { op: string }).op\n    )} request to ${resourcePath} but op must be one of \"${[\n      'findRecord',\n      'findRelatedRecord',\n      'findRelatedCollection',\n      'updateRecord',\n      'deleteRecord',\n      'createRecord',\n      'query',\n      'findMany',\n    ].join('\",\"')}\".`,\n    [\n      'findRecord',\n      'query',\n      'findMany',\n      'findRelatedCollection',\n      'findRelatedRecord',\n      'createRecord',\n      'updateRecord',\n      'deleteRecord',\n    ].includes(options.op)\n  );\n\n  assert(`buildBaseURL: host must NOT end with '/', received '${host}'`, host === '/' || !host.endsWith('/'));\n  assert(`buildBaseURL: namespace must NOT start with '/', received '${namespace}'`, !namespace.startsWith('/'));\n  assert(`buildBaseURL: namespace must NOT end with '/', received '${namespace}'`, !namespace.endsWith('/'));\n  assert(\n    `buildBaseURL: resourcePath must NOT start with '/', received '${resourcePath}'`,\n    !resourcePath.startsWith('/')\n  );\n  assert(`buildBaseURL: resourcePath must NOT end with '/', received '${resourcePath}'`, !resourcePath.endsWith('/'));\n  assert(`buildBaseURL: fieldPath must NOT start with '/', received '${fieldPath}'`, !fieldPath.startsWith('/'));\n  assert(`buildBaseURL: fieldPath must NOT end with '/', received '${fieldPath}'`, !fieldPath.endsWith('/'));\n  assert(`buildBaseURL: idPath must NOT start with '/', received '${idPath}'`, !idPath.startsWith('/'));\n  assert(`buildBaseURL: idPath must NOT end with '/', received '${idPath}'`, !idPath.endsWith('/'));\n\n  const url = [host === '/' ? '' : host, namespace, resourcePath, idPath, fieldPath].filter(Boolean).join('/');\n  return host ? url : `/${url}`;\n}\n\ntype SerializablePrimitive = string | number | boolean | null;\ntype Serializable = SerializablePrimitive | SerializablePrimitive[];\nexport type QueryParamsSerializationOptions = {\n  arrayFormat?: 'bracket' | 'indices' | 'repeat' | 'comma';\n};\nexport type QueryParamsSource = Record<string, Serializable> | URLSearchParams;\n\nconst DEFAULT_QUERY_PARAMS_SERIALIZATION_OPTIONS: QueryParamsSerializationOptions = {\n  arrayFormat: 'comma',\n};\n\nfunction handleInclude(include: string | string[]): string[] {\n  assert(\n    `Expected include to be a string or array, got ${typeof include}`,\n    typeof include === 'string' || Array.isArray(include)\n  );\n  return typeof include === 'string' ? include.split(',') : include;\n}\n\n/**\n * filter out keys of an object that have falsy values or point to empty arrays\n * returning a new object with only those keys that have truthy values / non-empty arrays\n *\n * @method filterEmpty\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {Record<string, Serializable>} source object to filter keys with empty values from\n * @returns {Record<string, Serializable>} A new object with the keys that contained empty values removed\n */\nexport function filterEmpty(source: Record<string, Serializable>): Record<string, Serializable> {\n  const result: Record<string, Serializable> = {};\n  for (const key in source) {\n    const value = source[key];\n    // Allow `0` and `false` but filter falsy values that indicate \"empty\"\n    if (value !== undefined && value !== null && value !== '') {\n      if (!Array.isArray(value) || value.length > 0) {\n        result[key] = source[key];\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Sorts query params by both key and value returning a new URLSearchParams\n * object with the keys inserted in sorted order.\n *\n * Treats `included` specially, splicing it into an array if it is a string and sorting the array.\n *\n * Options:\n * - arrayFormat: 'bracket' | 'indices' | 'repeat' | 'comma'\n *\n * 'bracket': appends [] to the key for every value e.g. `&ids[]=1&ids[]=2`\n * 'indices': appends [i] to the key for every value e.g. `&ids[0]=1&ids[1]=2`\n * 'repeat': appends the key for every value e.g. `&ids=1&ids=2`\n * 'comma' (default): appends the key once with a comma separated list of values e.g. `&ids=1,2`\n *\n * @method sortQueryParams\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {URLSearchParams | object} params\n * @param {object} options\n * @returns {URLSearchParams} A URLSearchParams with keys inserted in sorted order\n */\nexport function sortQueryParams(params: QueryParamsSource, options?: QueryParamsSerializationOptions): URLSearchParams {\n  options = Object.assign({}, DEFAULT_QUERY_PARAMS_SERIALIZATION_OPTIONS, options);\n  const paramsIsObject = !(params instanceof URLSearchParams);\n  const urlParams = new URLSearchParams();\n  const dictionaryParams: Record<string, Serializable> = paramsIsObject ? params : {};\n\n  if (!paramsIsObject) {\n    params.forEach((value, key) => {\n      const hasExisting = key in dictionaryParams;\n      if (!hasExisting) {\n        dictionaryParams[key] = value;\n      } else {\n        const existingValue = dictionaryParams[key];\n        if (Array.isArray(existingValue)) {\n          existingValue.push(value);\n        } else {\n          dictionaryParams[key] = [existingValue, value];\n        }\n      }\n    });\n  }\n\n  if ('include' in dictionaryParams) {\n    dictionaryParams.include = handleInclude(dictionaryParams.include as string | string[]);\n  }\n\n  const sortedKeys = Object.keys(dictionaryParams).sort();\n  sortedKeys.forEach((key) => {\n    const value = dictionaryParams[key];\n    if (Array.isArray(value)) {\n      value.sort();\n      switch (options!.arrayFormat) {\n        case 'indices':\n          value.forEach((v, i) => {\n            urlParams.append(`${key}[${i}]`, String(v));\n          });\n          return;\n        case 'bracket':\n          value.forEach((v) => {\n            urlParams.append(`${key}[]`, String(v));\n          });\n          return;\n        case 'repeat':\n          value.forEach((v) => {\n            urlParams.append(key, String(v));\n          });\n          return;\n        case 'comma':\n        default:\n          urlParams.append(key, value.join(','));\n          return;\n      }\n    } else {\n      urlParams.append(key, String(value));\n    }\n  });\n\n  return urlParams;\n}\n\n/**\n * Sorts query params by both key and value, returning a query params string\n *\n * Treats `included` specially, splicing it into an array if it is a string and sorting the array.\n *\n * Options:\n * - arrayFormat: 'bracket' | 'indices' | 'repeat' | 'comma'\n *\n * 'bracket': appends [] to the key for every value e.g. `ids[]=1&ids[]=2`\n * 'indices': appends [i] to the key for every value e.g. `ids[0]=1&ids[1]=2`\n * 'repeat': appends the key for every value e.g. `ids=1&ids=2`\n * 'comma' (default): appends the key once with a comma separated list of values e.g. `ids=1,2`\n *\n * @method sortQueryParams\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {URLSearchParams | object} params\n * @param {object} [options]\n * @returns {string} A sorted query params string without the leading `?`\n */\nexport function buildQueryParams(params: QueryParamsSource, options?: QueryParamsSerializationOptions): string {\n  return sortQueryParams(params, options).toString();\n}\nexport interface CacheControlValue {\n  immutable?: boolean;\n  'max-age'?: number;\n  'must-revalidate'?: boolean;\n  'must-understand'?: boolean;\n  'no-cache'?: boolean;\n  'no-store'?: boolean;\n  'no-transform'?: boolean;\n  'only-if-cached'?: boolean;\n  private?: boolean;\n  'proxy-revalidate'?: boolean;\n  public?: boolean;\n  's-maxage'?: number;\n  'stale-if-error'?: number;\n  'stale-while-revalidate'?: number;\n}\n\nconst NUMERIC_KEYS = new Set(['max-age', 's-maxage', 'stale-if-error', 'stale-while-revalidate']);\n\n/**\n *  Parses a string Cache-Control header value into an object with the following structure:\n *\n * ```ts\n * interface CacheControlValue {\n *   immutable?: boolean;\n *   'max-age'?: number;\n *   'must-revalidate'?: boolean;\n *   'must-understand'?: boolean;\n *   'no-cache'?: boolean;\n *   'no-store'?: boolean;\n *   'no-transform'?: boolean;\n *   'only-if-cached'?: boolean;\n *   private?: boolean;\n *   'proxy-revalidate'?: boolean;\n *   public?: boolean;\n *   's-maxage'?: number;\n *   'stale-if-error'?: number;\n *   'stale-while-revalidate'?: number;\n * }\n * ```\n * @method parseCacheControl\n * @static\n * @public\n * @for @ember-data/request-utils\n * @param {string} header\n * @returns {CacheControlValue}\n */\nexport function parseCacheControl(header: string): CacheControlValue {\n  let key = '';\n  let value = '';\n  let isParsingKey = true;\n  let cacheControlValue: CacheControlValue = {};\n\n  function parseCacheControlValue(stringToParse: string): number {\n    const parsedValue = Number.parseInt(stringToParse);\n    assert(`Invalid Cache-Control value, expected a number but got - ${stringToParse}`, !Number.isNaN(parsedValue));\n    return parsedValue;\n  }\n\n  for (let i = 0; i < header.length; i++) {\n    let char = header.charAt(i);\n    if (char === ',') {\n      assert(`Invalid Cache-Control value, expected a value`, !isParsingKey || !NUMERIC_KEYS.has(key));\n      assert(\n        `Invalid Cache-Control value, expected a value after \"=\" but got \",\"`,\n        i === 0 || header.charAt(i - 1) !== '='\n      );\n      isParsingKey = true;\n      cacheControlValue[key] = NUMERIC_KEYS.has(key) ? parseCacheControlValue(value) : true;\n      key = '';\n      value = '';\n      continue;\n    } else if (char === '=') {\n      assert(`Invalid Cache-Control value, expected a value after \"=\"`, i + 1 !== header.length);\n      isParsingKey = false;\n    } else if (char === ' ' || char === `\\t` || char === `\\n`) {\n      continue;\n    } else if (isParsingKey) {\n      key += char;\n    } else {\n      value += char;\n    }\n\n    if (i === header.length - 1) {\n      cacheControlValue[key] = NUMERIC_KEYS.has(key) ? parseCacheControlValue(value) : true;\n    }\n  }\n\n  return cacheControlValue;\n}\n\nfunction isStale(headers: Headers, expirationTime: number): boolean {\n  // const age = headers.get('age');\n  // const cacheControl = parseCacheControl(headers.get('cache-control') || '');\n  // const expires = headers.get('expires');\n  // const lastModified = headers.get('last-modified');\n  const date = headers.get('date');\n\n  if (!date) {\n    return true;\n  }\n\n  const time = new Date(date).getTime();\n  const now = Date.now();\n  const deadline = time + expirationTime;\n\n  const result = now > deadline;\n\n  return result;\n}\n\nexport type LifetimesConfig = { apiCacheSoftExpires: number; apiCacheHardExpires: number };\n\n/**\n * A basic LifetimesService that can be added to the Store service.\n *\n * Determines staleness based on time since the request was last received from the API\n * using the `date` header.\n *\n * This allows the Store's CacheHandler to determine if a request is expired and\n * should be refetched upon next request.\n *\n * The `Fetch` handler provided by `@ember-data/request/fetch` will automatically\n * add the `date` header to responses if it is not present.\n *\n * Usage:\n *\n * ```ts\n * import { LifetimesService } from '@ember-data/request-utils';\n * import DataStore from '@ember-data/store';\n *\n * // ...\n *\n * export class Store extends DataStore {\n *   constructor(args) {\n *     super(args);\n *     this.lifetimes = new LifetimesService(this, { apiCacheSoftExpires: 30_000, apiCacheHardExpires: 60_000 });\n *   }\n * }\n * ```\n *\n * @class LifetimesService\n * @public\n * @module @ember-data/request-utils\n */\n// TODO this doesn't get documented correctly on the website because it shares a class name\n// with the interface expected by the Store service\nexport class LifetimesService {\n  declare store: Store;\n  declare config: LifetimesConfig;\n  constructor(store: Store, config: LifetimesConfig) {\n    this.store = store;\n    this.config = config;\n  }\n\n  isHardExpired(identifier: StableDocumentIdentifier): boolean {\n    const cached = this.store.cache.peekRequest(identifier);\n    return !cached || !cached.response || isStale(cached.response.headers, this.config.apiCacheHardExpires);\n  }\n  isSoftExpired(identifier: StableDocumentIdentifier): boolean {\n    const cached = this.store.cache.peekRequest(identifier);\n    return !cached || !cached.response || isStale(cached.response.headers, this.config.apiCacheSoftExpires);\n  }\n}\n"],"names":["CONFIG","host","namespace","setBuildURLConfig","config","OPERATIONS_WITH_PRIMARY_RECORDS","Set","isOperationWithPrimaryRecord","options","has","op","resourcePathForType","identifiers","type","identifier","buildBaseURL","urlOptions","Object","assign","assert","length","Array","isArray","every","i","id","idPath","encodeURIComponent","resourcePath","fieldPath","String","join","includes","endsWith","startsWith","url","filter","Boolean","DEFAULT_QUERY_PARAMS_SERIALIZATION_OPTIONS","arrayFormat","handleInclude","include","split","filterEmpty","source","result","key","value","undefined","sortQueryParams","params","paramsIsObject","URLSearchParams","urlParams","dictionaryParams","forEach","hasExisting","existingValue","push","sortedKeys","keys","sort","v","append","buildQueryParams","toString","NUMERIC_KEYS","parseCacheControl","header","isParsingKey","cacheControlValue","parseCacheControlValue","stringToParse","parsedValue","Number","parseInt","isNaN","char","charAt","isStale","headers","expirationTime","date","get","time","Date","getTime","now","deadline","LifetimesService","constructor","store","isHardExpired","cached","cache","peekRequest","response","apiCacheHardExpires","isSoftExpired","apiCacheSoftExpires"],"mappings":";;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAOA,IAAIA,MAAsB,GAAG;AAC3BC,EAAAA,IAAI,EAAE,EAAE;AACRC,EAAAA,SAAS,EAAE,EAAA;AACb,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,iBAAiBA,CAACC,MAAsB,EAAE;AACxDJ,EAAAA,MAAM,GAAGI,MAAM,CAAA;AACjB,CAAA;AA6EA,MAAMC,+BAA+B,GAAG,IAAIC,GAAG,CAAC,CAC9C,YAAY,EACZ,mBAAmB,EACnB,uBAAuB,EACvB,cAAc,EACd,cAAc,CACf,CAAC,CAAA;AAEF,SAASC,4BAA4BA,CACnCC,OAAmB,EAMM;AACzB,EAAA,OAAOH,+BAA+B,CAACI,GAAG,CAACD,OAAO,CAACE,EAAE,CAAC,CAAA;AACxD,CAAA;AAEA,SAASC,mBAAmBA,CAACH,OAAmB,EAAU;AACxD,EAAA,OAAOA,OAAO,CAACE,EAAE,KAAK,UAAU,GAAGF,OAAO,CAACI,WAAW,CAAC,CAAC,CAAC,CAACC,IAAI,GAAGL,OAAO,CAACM,UAAU,CAACD,IAAI,CAAA;AAC1F,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,YAAYA,CAACC,UAAsB,EAAU;AAC3D,EAAA,MAAMR,OAAO,GAAGS,MAAM,CAACC,MAAM,CAC3B;IACEj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"}