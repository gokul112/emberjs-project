{"version":3,"file":"request.js","sources":["../src/-private/builders/-utils.ts","../src/-private/builders/find-record.ts","../src/-private/builders/query.ts","../src/-private/builders/save-record.ts","../src/-private/serialize.ts"],"sourcesContent":["import { type UrlOptions } from '@ember-data/request-utils';\nimport type { CacheOptions, ConstrainedRequestOptions } from '@ember-data/types/request';\n\nexport function copyForwardUrlOptions(urlOptions: UrlOptions, options: ConstrainedRequestOptions): void {\n  if ('host' in options) {\n    urlOptions.host = options.host;\n  }\n  if ('namespace' in options) {\n    urlOptions.namespace = options.namespace;\n  }\n  if ('resourcePath' in options) {\n    urlOptions.resourcePath = options.resourcePath;\n  }\n}\n\nexport function extractCacheOptions(options: ConstrainedRequestOptions) {\n  const cacheOptions: CacheOptions = {};\n  if ('reload' in options) {\n    cacheOptions.reload = options.reload;\n  }\n  if ('backgroundReload' in options) {\n    cacheOptions.backgroundReload = options.backgroundReload;\n  }\n  return cacheOptions;\n}\n","/**\n * @module @ember-data/json-api/request\n */\nimport { pluralize } from 'ember-inflector';\n\nimport { buildBaseURL, buildQueryParams, type FindRecordUrlOptions } from '@ember-data/request-utils';\nimport type {\n  FindRecordOptions,\n  FindRecordRequestOptions,\n  RemotelyAccessibleIdentifier,\n} from '@ember-data/types/request';\n\nimport { copyForwardUrlOptions, extractCacheOptions } from './-utils';\n\n/**\n * Builds request options to fetch a single resource by a known id or identifier\n * configured for the url and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const data = await store.request(findRecord('person', '1'));\n * ```\n *\n * **With Options**\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const options = findRecord('person', '1', { include: ['pets', 'friends'] });\n * const data = await store.request(options);\n * ```\n *\n * **With an Identifier**\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const options = findRecord({ type: 'person', id: '1' }, { include: ['pets', 'friends'] });\n * const data = await store.request(options);\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's lifetimes service, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's lifetimes service,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { findRecord } from '@ember-data/json-api/request';\n *\n * const options = findRecord('person', '1', { include: ['pets', 'friends'] }, { namespace: 'api/v2' });\n * const data = await store.request(options);\n * ```\n *\n * @method findRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param identifier\n * @param options\n */\nexport function findRecord(\n  identifier: RemotelyAccessibleIdentifier,\n  options?: FindRecordOptions\n): FindRecordRequestOptions;\nexport function findRecord(type: string, id: string, options?: FindRecordOptions): FindRecordRequestOptions;\nexport function findRecord(\n  arg1: string | RemotelyAccessibleIdentifier,\n  arg2: string | FindRecordOptions | undefined,\n  arg3?: FindRecordOptions\n): FindRecordRequestOptions {\n  const identifier: RemotelyAccessibleIdentifier = typeof arg1 === 'string' ? { type: arg1, id: arg2 as string } : arg1;\n  const options = ((typeof arg1 === 'string' ? arg3 : arg2) || {}) as FindRecordOptions;\n  const cacheOptions = extractCacheOptions(options);\n  const urlOptions: FindRecordUrlOptions = {\n    identifier,\n    op: 'findRecord',\n    resourcePath: pluralize(identifier.type),\n  };\n\n  copyForwardUrlOptions(urlOptions, options);\n\n  const url = buildBaseURL(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', 'application/vnd.api+json');\n\n  return {\n    url: options.include?.length\n      ? `${url}?${buildQueryParams({ include: options.include }, options.urlParamsSettings)}`\n      : url,\n    method: 'GET',\n    headers,\n    cacheOptions,\n    op: 'findRecord',\n    records: [identifier],\n  };\n}\n","/**\n * @module @ember-data/json-api/request\n */\nimport { pluralize } from 'ember-inflector';\n\nimport { buildBaseURL, buildQueryParams, QueryParamsSource, type QueryUrlOptions } from '@ember-data/request-utils';\nimport type { ConstrainedRequestOptions, QueryRequestOptions } from '@ember-data/types/request';\n\nimport { copyForwardUrlOptions, extractCacheOptions } from './-utils';\n\n/**\n * Builds request options to query for resources, usually by a primary\n * type, configured for the url and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { query } from '@ember-data/json-api/request';\n *\n * const data = await store.request(query('person'));\n * ```\n *\n * **With Query Params**\n *\n * ```ts\n * import { query } from '@ember-data/json-api/request';\n *\n * const options = query('person', { include: ['pets', 'friends'] });\n * const data = await store.request(options);\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's lifetimes service, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's lifetimes service,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { query } from '@ember-data/json-api/request';\n *\n * const options = query('person', { include: ['pets', 'friends'] }, { reload: true });\n * const data = await store.request(options);\n * ```\n *\n * @method query\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param identifier\n * @param query\n * @param options\n */\nexport function query(\n  type: string,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  query: QueryParamsSource = {},\n  options: ConstrainedRequestOptions = {}\n): QueryRequestOptions {\n  const cacheOptions = extractCacheOptions(options);\n  const urlOptions: QueryUrlOptions = {\n    identifier: { type },\n    op: 'query',\n    resourcePath: pluralize(type),\n  };\n\n  copyForwardUrlOptions(urlOptions, options);\n\n  const url = buildBaseURL(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', 'application/vnd.api+json');\n\n  return {\n    url: `${url}?${buildQueryParams(query, options.urlParamsSettings)}`,\n    method: 'GET',\n    headers,\n    cacheOptions,\n    op: 'query',\n  };\n}\n","import { assert } from '@ember/debug';\n\nimport { pluralize } from 'ember-inflector';\n\nimport {\n  buildBaseURL,\n  type CreateRecordUrlOptions,\n  type DeleteRecordUrlOptions,\n  type UpdateRecordUrlOptions,\n} from '@ember-data/request-utils';\nimport { recordIdentifierFor } from '@ember-data/store';\nimport type { StableExistingRecordIdentifier, StableRecordIdentifier } from '@ember-data/types/q/identifier';\nimport {\n  ConstrainedRequestOptions,\n  CreateRequestOptions,\n  DeleteRequestOptions,\n  UpdateRequestOptions,\n} from '@ember-data/types/request';\n\nimport { copyForwardUrlOptions } from './-utils';\n\nfunction isExisting(identifier: StableRecordIdentifier): identifier is StableExistingRecordIdentifier {\n  return 'id' in identifier && identifier.id !== null && 'type' in identifier && identifier.type !== null;\n}\n\n/**\n * Builds request options to delete record for resources,\n * configured for the url, method and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { deleteRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.peekRecord('person', '1');\n *\n * // mark record as deleted\n * store.deleteRecord(person);\n *\n * // persist deletion\n * const data = await store.request(deleteRecord(person));\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's lifetimes service, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's lifetimes service,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { deleteRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.peekRecord('person', '1');\n *\n * // mark record as deleted\n * store.deleteRecord(person);\n *\n * // persist deletion\n * const options = deleteRecord(person, { namespace: 'api/v1' });\n * const data = await store.request(options);\n * ```\n *\n * @method deleteRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param record\n * @param options\n */\nexport function deleteRecord(record: unknown, options: ConstrainedRequestOptions = {}): DeleteRequestOptions {\n  const identifier = recordIdentifierFor(record);\n  assert(`Expected to be given a record instance`, identifier);\n  assert(`Cannot delete a record that does not have an associated type and id.`, isExisting(identifier));\n\n  const urlOptions: DeleteRecordUrlOptions = {\n    identifier: identifier,\n    op: 'deleteRecord',\n    resourcePath: pluralize(identifier.type),\n  };\n\n  copyForwardUrlOptions(urlOptions, options);\n\n  const url = buildBaseURL(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', 'application/vnd.api+json');\n\n  return {\n    url,\n    method: 'DELETE',\n    headers,\n    op: 'deleteRecord',\n    data: {\n      record: identifier,\n    },\n  };\n}\n\n/**\n * Builds request options to create new record for resources,\n * configured for the url, method and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { createRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.createRecord('person', { name: 'Ted' });\n * const data = await store.request(createRecord(person));\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's lifetimes service, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's lifetimes service,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { createRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.createRecord('person', { name: 'Ted' });\n * const options = createRecord(person, { namespace: 'api/v1' });\n * const data = await store.request(options);\n * ```\n *\n * @method createRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param record\n * @param options\n */\nexport function createRecord(record: unknown, options: ConstrainedRequestOptions = {}): CreateRequestOptions {\n  const identifier = recordIdentifierFor(record);\n  assert(`Expected to be given a record instance`, identifier);\n\n  const urlOptions: CreateRecordUrlOptions = {\n    identifier: identifier,\n    op: 'createRecord',\n    resourcePath: pluralize(identifier.type),\n  };\n\n  copyForwardUrlOptions(urlOptions, options);\n\n  const url = buildBaseURL(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', 'application/vnd.api+json');\n\n  return {\n    url,\n    method: 'POST',\n    headers,\n    op: 'createRecord',\n    data: {\n      record: identifier,\n    },\n  };\n}\n\n/**\n * Builds request options to update existing record for resources,\n * configured for the url, method and header expectations of most JSON:API APIs.\n *\n * **Basic Usage**\n *\n * ```ts\n * import { updateRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.peekRecord('person', '1');\n * person.name = 'Chris';\n * const data = await store.request(updateRecord(person));\n * ```\n *\n * **Supplying Options to Modify the Request Behavior**\n *\n * The following options are supported:\n *\n * - `patch` - Allows caller to specify whether to use a PATCH request instead of a PUT request, defaults to `false`.\n * - `host` - The host to use for the request, defaults to the `host` configured with `setBuildURLConfig`.\n * - `namespace` - The namespace to use for the request, defaults to the `namespace` configured with `setBuildURLConfig`.\n * - `resourcePath` - The resource path to use for the request, defaults to pluralizing the supplied type\n * - `reload` - Whether to forcibly reload the request if it is already in the store, not supplying this\n *      option will delegate to the store's lifetimes service, defaulting to `false` if none is configured.\n * - `backgroundReload` - Whether to reload the request if it is already in the store, but to also resolve the\n *      promise with the cached value, not supplying this option will delegate to the store's lifetimes service,\n *      defaulting to `false` if none is configured.\n * - `urlParamsSetting` - an object containing options for how to serialize the query params (see `buildQueryParams`)\n *\n * ```ts\n * import { updateRecord } from '@ember-data/json-api/request';\n *\n * const person = this.store.peekRecord('person', '1');\n * person.name = 'Chris';\n * const options = updateRecord(person, { patch: true });\n * const data = await store.request(options);\n * ```\n *\n * @method updateRecord\n * @public\n * @static\n * @for @ember-data/json-api/request\n * @param record\n * @param options\n */\nexport function updateRecord(\n  record: unknown,\n  options: ConstrainedRequestOptions & { patch?: boolean } = {}\n): UpdateRequestOptions {\n  const identifier = recordIdentifierFor(record);\n  assert(`Expected to be given a record instance`, identifier);\n  assert(`Cannot update a record that does not have an associated type and id.`, isExisting(identifier));\n\n  const urlOptions: UpdateRecordUrlOptions = {\n    identifier: identifier,\n    op: 'updateRecord',\n    resourcePath: pluralize(identifier.type),\n  };\n\n  copyForwardUrlOptions(urlOptions, options);\n\n  const url = buildBaseURL(urlOptions);\n  const headers = new Headers();\n  headers.append('Accept', 'application/vnd.api+json');\n\n  return {\n    url,\n    method: options.patch ? 'PATCH' : 'PUT',\n    headers,\n    op: 'updateRecord',\n    data: {\n      record: identifier,\n    },\n  };\n}\n","/**\n * @module @ember-data/json-api/request\n */\nimport { assert } from '@ember/debug';\n\nimport type { Cache } from '@ember-data/types/cache/cache';\nimport type { StableRecordIdentifier } from '@ember-data/types/q/identifier';\nimport type { JsonApiResource } from '@ember-data/types/q/record-data-json-api';\n\n/**\n * Serializes the current state of a resource or array of resources for use with POST or PUT requests.\n *\n * @method serializeResources\n * @static\n * @public\n * @for @ember-data/json-api/request\n * @param {Cache} cache}\n * @param {StableRecordIdentifier} identifier\n * @returns {object} An object with a `data` property containing the serialized resource patch\n */\nexport function serializeResources(cache: Cache, identifiers: StableRecordIdentifier): { data: JsonApiResource };\nexport function serializeResources(cache: Cache, identifiers: StableRecordIdentifier[]): { data: JsonApiResource[] };\nexport function serializeResources(\n  cache: Cache,\n  identifiers: StableRecordIdentifier | StableRecordIdentifier[]\n): { data: JsonApiResource | JsonApiResource[] } {\n  return {\n    data: Array.isArray(identifiers)\n      ? identifiers.map((identifier) => _serializeResource(cache, identifier))\n      : _serializeResource(cache, identifiers),\n  };\n}\n\nfunction _serializeResource(cache: Cache, identifier: StableRecordIdentifier): JsonApiResource {\n  const { id, lid, type } = identifier;\n  // yup! this method actually does nothing. It's just here for the dev assertion\n  // and to assist in providing a little sugar to the consuming app via the `serializeResources` utility\n  const record = cache.peek(identifier) as JsonApiResource;\n  assert(\n    `A record with id ${String(id)} and type ${type} for lid ${lid} was not found not in the supplied Cache.`,\n    record\n  );\n\n  return record;\n}\n\n/**\n * Serializes changes to a resource for use with PATCH requests.\n *\n * Only attributes which are changed are serialized.\n * Only relationships which are changed are serialized.\n *\n * Collection relationships serialize the collection as a whole.\n *\n * If you would like to serialize updates to a collection more granularly\n * (for instance, as operations) request the diff from the store and\n * serialize as desired:\n *\n * ```ts\n * const relationshipDiffMap = cache.changedRelationships(identifier);\n * ```\n *\n * @method serializePatch\n * @static\n * @public\n * @for @ember-data/json-api/request\n * @param {Cache} cache}\n * @param {StableRecordIdentifier} identifier\n * @returns {object} An object with a `data` property containing the serialized resource patch\n */\nexport function serializePatch(\n  cache: Cache,\n  identifier: StableRecordIdentifier\n  // options: { include?: string[] } = {}\n): { data: JsonApiResource } {\n  const { id, lid, type } = identifier;\n  const record = cache.peek(identifier) as JsonApiResource;\n  assert(\n    `A record with id ${String(id)} and type ${type} for lid ${lid} was not found not in the supplied Cache.`,\n    record\n  );\n\n  const data: JsonApiResource = {\n    type,\n    lid,\n    id,\n  };\n\n  if (cache.hasChangedAttrs(identifier)) {\n    const attrsChanges = cache.changedAttrs(identifier);\n    const attributes = {};\n\n    Object.keys(attrsChanges).forEach((key) => {\n      const newVal = attrsChanges[key][1];\n      attributes[key] = newVal === undefined ? null : newVal;\n    });\n\n    data.attributes = attributes;\n  }\n\n  const changedRelationships = cache.changedRelationships(identifier);\n  if (changedRelationships.size) {\n    const relationships = {};\n\n    changedRelationships.forEach((diff, key) => {\n      relationships[key] = { data: diff.localState };\n    });\n\n    data.relationships = relationships;\n  }\n\n  return { data };\n}\n"],"names":["copyForwardUrlOptions","urlOptions","options","host","namespace","resourcePath","extractCacheOptions","cacheOptions","reload","backgroundReload","findRecord","arg1","arg2","arg3","identifier","type","id","op","pluralize","url","buildBaseURL","headers","Headers","append","include","length","buildQueryParams","urlParamsSettings","method","records","query","isExisting","deleteRecord","record","recordIdentifierFor","assert","data","createRecord","updateRecord","patch","serializeResources","cache","identifiers","Array","isArray","map","_serializeResource","lid","peek","String","serializePatch","hasChangedAttrs","attrsChanges","changedAttrs","attributes","Object","keys","forEach","key","newVal","undefined","changedRelationships","size","relationships","diff","localState"],"mappings":"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"}