{"version":3,"file":"hooks-6d5c2fc2.js","sources":["../src/-private/model-for-mixin.ts","../src/-private/schema-provider.ts","../src/-private/hooks.ts"],"sourcesContent":["import { getOwner } from '@ember/application';\n\nimport type Store from '@ember-data/store';\n\nimport Model, { type ModelFactory } from './model';\n\n/*\n    In case someone defined a relationship to a mixin, for example:\n    ```\n      import Model, { belongsTo, hasMany } from '@ember-data/model';\n      import Mixin from '@ember/object/mixin';\n\n      class CommentModel extends Model {\n        @belongsTo('commentable', { polymorphic: true }) owner;\n      }\n\n      let Commentable = Mixin.create({\n        @hasMany('comment') comments;\n      });\n    ```\n    we want to look up a Commentable class which has all the necessary\n    relationship meta data. Thus, we look up the mixin and create a mock\n    Model, so we can access the relationship CPs of the mixin (`comments`)\n    in this case\n  */\nexport default function modelForMixin(store: Store, normalizedModelName: string): ModelFactory | undefined {\n  let owner: any = getOwner(store);\n  let MaybeMixin = owner.factoryFor(`mixin:${normalizedModelName}`);\n  let mixin = MaybeMixin && MaybeMixin.class;\n  if (mixin) {\n    let ModelForMixin = Model.extend(mixin);\n    ModelForMixin.__isMixin = true;\n    ModelForMixin.__mixin = mixin;\n    //Cache the class as a model\n    owner.register('model:' + normalizedModelName, ModelForMixin);\n  }\n  return owner.factoryFor(`model:${normalizedModelName}`);\n}\n","import { getOwner } from '@ember/application';\n\nimport type Store from '@ember-data/store';\nimport type { RecordIdentifier } from '@ember-data/types/q/identifier';\nimport type { AttributesSchema, RelationshipsSchema } from '@ember-data/types/q/record-data-schemas';\n\nimport type { FactoryCache, ModelFactory, ModelStore } from './model';\nimport Model from './model';\nimport _modelForMixin from './model-for-mixin';\nimport { normalizeModelName } from './util';\n\nexport class ModelSchemaProvider {\n  declare store: ModelStore;\n  declare _relationshipsDefCache: Record<string, RelationshipsSchema>;\n  declare _attributesDefCache: Record<string, AttributesSchema>;\n\n  constructor(store: ModelStore) {\n    this.store = store;\n    this._relationshipsDefCache = Object.create(null) as Record<string, RelationshipsSchema>;\n    this._attributesDefCache = Object.create(null) as Record<string, AttributesSchema>;\n  }\n\n  // Following the existing RD implementation\n  attributesDefinitionFor(identifier: RecordIdentifier | { type: string }): AttributesSchema {\n    const { type } = identifier;\n    let attributes: AttributesSchema;\n\n    attributes = this._attributesDefCache[type];\n\n    if (attributes === undefined) {\n      let modelClass = this.store.modelFor(type);\n      let attributeMap = modelClass.attributes;\n\n      attributes = Object.create(null) as AttributesSchema;\n      attributeMap.forEach((meta, name) => (attributes[name] = meta));\n      this._attributesDefCache[type] = attributes;\n    }\n\n    return attributes;\n  }\n\n  // Following the existing RD implementation\n  relationshipsDefinitionFor(identifier: RecordIdentifier | { type: string }): RelationshipsSchema {\n    const { type } = identifier;\n    let relationships: RelationshipsSchema;\n\n    relationships = this._relationshipsDefCache[type];\n\n    if (relationships === undefined) {\n      let modelClass = this.store.modelFor(type) as typeof Model;\n      relationships = modelClass.relationshipsObject || null;\n      this._relationshipsDefCache[type] = relationships;\n    }\n\n    return relationships;\n  }\n\n  doesTypeExist(modelName: string): boolean {\n    const type = normalizeModelName(modelName);\n    const factory = getModelFactory(this.store, type);\n\n    return factory !== null;\n  }\n}\n\nexport function buildSchema(store: Store) {\n  return new ModelSchemaProvider(store as ModelStore);\n}\n\nexport function getModelFactory(store: ModelStore, type: string): ModelFactory | null {\n  if (!store._modelFactoryCache) {\n    store._modelFactoryCache = Object.create(null) as FactoryCache;\n  }\n  const cache = store._modelFactoryCache;\n  let factory: ModelFactory | undefined = cache[type];\n\n  if (!factory) {\n    const owner = getOwner(store)!;\n    factory = owner.factoryFor(`model:${type}`) as ModelFactory | undefined;\n\n    if (!factory) {\n      //Support looking up mixins as base types for polymorphic relationships\n      factory = _modelForMixin(store, type);\n    }\n\n    if (!factory) {\n      // we don't cache misses in case someone wants to register a missing model\n      return null;\n    }\n\n    let klass = factory.class;\n\n    if (klass.isModel) {\n      let hasOwnModelNameSet = klass.modelName && Object.prototype.hasOwnProperty.call(klass, 'modelName');\n      if (!hasOwnModelNameSet) {\n        Object.defineProperty(klass, 'modelName', { value: type });\n      }\n    }\n\n    cache[type] = factory;\n  }\n\n  return factory;\n}\n","import { getOwner, setOwner } from '@ember/application';\nimport { assert } from '@ember/debug';\n\nimport { setCacheFor, setRecordIdentifier, type Store, StoreMap } from '@ember-data/store/-private';\nimport type { Cache } from '@ember-data/types/cache/cache';\nimport type { StableRecordIdentifier } from '@ember-data/types/q/identifier';\n\nimport type { ModelStore } from './model';\nimport Model from './model';\nimport { getModelFactory } from './schema-provider';\nimport { normalizeModelName } from './util';\n\nfunction recast(context: Store): asserts context is ModelStore {}\n\nexport function instantiateRecord(\n  this: Store,\n  identifier: StableRecordIdentifier,\n  createRecordArgs: { [key: string]: unknown }\n): Model {\n  const type = identifier.type;\n\n  recast(this);\n\n  const cache = this.cache;\n  // TODO deprecate allowing unknown args setting\n  const createOptions = {\n    _createProps: createRecordArgs,\n    // TODO @deprecate consider deprecating accessing record properties during init which the below is necessary for\n    _secretInit: {\n      identifier,\n      cache,\n      store: this,\n      cb: secretInit,\n    },\n  };\n\n  // ensure that `getOwner(this)` works inside a model instance\n  setOwner(createOptions, getOwner(this)!);\n  const factory = getModelFactory(this, type);\n\n  assert(`No model was found for '${type}'`, factory);\n  return factory.class.create(createOptions);\n}\n\nexport function teardownRecord(record: Model): void {\n  assert(\n    `expected to receive an instance of Model from @ember-data/model. If using a custom model make sure you implement teardownRecord`,\n    'destroy' in record\n  );\n  record.destroy();\n}\n\nexport function modelFor(this: Store, modelName: string): typeof Model | void {\n  assert(`You need to pass a model name to the store's modelFor method`, modelName);\n  assert(\n    `Please pass a proper model name to the store's modelFor method`,\n    typeof modelName === 'string' && modelName.length\n  );\n  recast(this);\n\n  const type = normalizeModelName(modelName);\n  const maybeFactory = getModelFactory(this, type);\n  const klass = maybeFactory && maybeFactory.class ? maybeFactory.class : null;\n\n  const ignoreType = !klass || !klass.isModel || this._forceShim;\n  if (!ignoreType) {\n    return klass;\n  }\n  assert(\n    `No model was found for '${type}' and no schema handles the type`,\n    this.getSchemaDefinitionService().doesTypeExist(type)\n  );\n}\n\nfunction secretInit(record: Model, cache: Cache, identifier: StableRecordIdentifier, store: Store): void {\n  setRecordIdentifier(record, identifier);\n  StoreMap.set(record, store);\n  setCacheFor(record, cache);\n}\n"],"names":["modelForMixin","store","normalizedModelName","owner","getOwner","MaybeMixin","factoryFor","mixin","class","ModelForMixin","Model","extend","__isMixin","__mixin","register","ModelSchemaProvider","constructor","_relationshipsDefCache","Object","create","_attributesDefCache","attributesDefinitionFor","identifier","type","attributes","undefined","modelClass","modelFor","attributeMap","forEach","meta","name","relationshipsDefinitionFor","relationships","relationshipsObject","doesTypeExist","modelName","normalizeModelName","factory","getModelFactory","buildSchema","_modelFactoryCache","cache","_modelForMixin","klass","isModel","hasOwnModelNameSet","prototype","hasOwnProperty","call","defineProperty","value","instantiateRecord","createRecordArgs","createOptions","_createProps","_secretInit","cb","secretInit","setOwner","assert","teardownRecord","record","destroy","length","maybeFactory","ignoreType","_forceShim","getSchemaDefinitionService","setRecordIdentifier","StoreMap","set","setCacheFor"],"mappings":"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"}